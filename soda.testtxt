COMMAND:
./soda 1 1 1
./soda 1 -1

OUTPUT (Sample):
Usage: ./soda [ config-file [ random-seed (> 0) ] ]

EXPLANATION:
Making sure that we are not accepting an unacceptable command line arguments
-------------------------------------------------
COMMAND:
./soda invalid_file.txt
./soda invalid_file.txt 1

EXPLANATION:
Making sure that invalid files are erroring out of the system, with designated error from the provided config reader
-------------------------------------------------
COMMAND:
./soda

EXPLANATION:
Making sure that the default config-file is soda.config, when it is not defined as a command line argument
-------------------------------------------------
COMMAND:
./soda valid_file.config

OUTPUT (Sample):
Showing correct number of Students, Couriers, and Vending Machines (based on the soda.config file)

EXPLANATION:
Making sure that the number of tasks created for Students, Couriers, and Vending Machines match what is defined in that specific config file
-------------------------------------------------
COMMAND:
./soda valid_file.config 643

OUTPUT (Sample):
Parent	Gropoff	WATOff	Names	Truck	Plant	Stud0	Mach0	Mach1	Mach2	Mach3	Mach4	Cour0
*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******
			S		S		S5	S5	S5	S5	S5
S	S	S			G24
		C0,5	R0	S		S3,4						S
		W	R1									t0,5
			R2
			R3
D0,2	D5		R4
...	F	...	...	...	...	...	...	...	...	...	...	...
			N0,0			V0
...

EXPLANATION:
Making sure that all vending machines are registered on the name server, before the name server does anything else. This also shows that when
groupoff finished, it flushed the buffer, and then flushes a new special line.
-------------------------------------------------
COMMAND:
./soda valid_file.config 643

OUTPUT (Sample):
Parent	Gropoff	WATOff	Names	Truck	Plant	Stud0	Mach0	Mach1	Mach2	Mach3	Mach4	Cour0
*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******
			S		S		S5	S5	S5	S5	S5
S	S	S			G24
		C0,5	R0	S		S3,4						S
		W	R1									t0,5
			R2
			R3
D0,2	D5		R4
...	F	...	...	...	...	...	...	...	...	...	...	...
			N0,0			V0
			N0,1	P24		V1
				P0
				U0,36
				D0,0	P	V2
			N0,2		G17	V3	r
			N0,3			V4	R
D0,3			N0,4			V0
(cont)

EXPLANATION:
Making sure that all vending machines are registered on the name server, before the name server does anything else. This also shows that when
groupoff finished, it flushed the buffer, and then flushes a new special line. We also see the name server, properly rotating the vending machines
for Student 0, as they keep requesting for a new vending machine.
-------------------------------------------------
COMMAND:
./soda valid_file.config 800

OUTPUT (Sample):
Parent	Gropoff	WATOff	Names	Truck	Plant	Stud0	Stud1	Mach0	Mach1	Mach2	Mach3	Mach4	Cour0
*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******
			S		S			S5	S5	S5	S5	S5
S	S	S			G39
		C0,5	R0	S		S3,5							S
		C1,5	R1				S0,1						t0,5
		W	R2
			R3
D1,2			R4			V0
	D5		N0,0				V1
			N1,1				V2
			N1,2				V3
			N1,3	P39			V4
				d0,39
				U0,21
D1,1			N1,4	D0,0	P
			N1,0		G29		V0	r
	D5							R
...	F	...	...	...	...	...	...	...	...	...	...	...	...
						G3,0	G0,0	B0,0
				P29				B3,0
				d1,29
				U1,31
				D1,0	P
					G33				r
D1,3				P33					R
				d2,33
				U2,27
				D2,0	P
					G24					r
D0,3				P24						R
				d3,24
				U3,36
				D3,0	P
					G28						r
D0,3											R		L0
													t1,5
		W				L							L1
...	...	...	...	...	...	...	F	...	...	...	...	...	...
				P28
				d4,28
				U4,32
		C0,5		D4,0	P
					G14							r	t0,5
D0,1		W		P14								R
				d0,14
				U0,14
				D0,5	P
				d1,5	G27			r
				U1,26
				D1,0				R	r
D0,3				P27					R				T0,5
				d2,27
(cont)

EXPLANATION:
Here, we can see the plant producing a certain number of sodas, and then the truck is picking up the same amount. Furthermore, the truck is properly
rotating between the vending machines fairly, since every pickup doesn't make it start at 0 again. We also the vending machine start reloading and
finish reloading as the truck is delivering, which shows that no one else is interrupting the delivery. Student are also seen switching between
vending machines as the vending machines all start out empty, untill it finally buys a flavours. Students also report that their card has been lost
when the courier is losing them around the same lines.
-------------------------------------------------
COMMAND:
./soda valid_file.config 1234
SodaCost 				5
NumStudents 			5
MaxPurchases 			10
NumVendingMachines 		3
MaxStockPerFlavour 		10
MaxShippedPerFlavour 	10
TimeBetweenShipments 	5
GroupoffDelay 			5
ParentalDelay 			5
NumCouriers 			5

OUTPUT (Sample):
Parent	Gropoff	WATOff	Names	Truck	Plant	Stud0	Stud1	Stud2	Stud3	Stud4	Mach0	Mach1	Mach2	Cour0	Cour1	Cour2	Cour3	Cour4
*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******
			S		S						S5	S5	S5
S	S	S			G35
		C0,5	R0	S		S3,3								S	S	S	S	S
		C1,5	R1				S3,2
D0,3		C2,5	R2					S4,6
		C3,5				V0			S4,9
D1,3		C4,5	N0,0				V1			S4,1				t0,5
			N1,1	P35
				P0
				U0,25
		W		D0,0	P			V2
		W	N2,2		G21				V0		r				t1,5
D1,3	D5	W	N3,0							V1	R				T1,5	t2,5	t3,5
		W	N4,1					V0
				P21				G4,0
				P1
				U1,39
			N2,0	D1,0	P						B4,0							t4,5
D4,3	D5	W	N1,2		G24	G3,0	V2					r
							V0				B3,0	R
	D5		N1,0	P24			B3,0				B3,0
(cont)

EXPLANATION:
Trying to see how well the couriers would distribute Jobs with an equal number of students. All jobs were almost evenly distributed between couriers
with a courier picking up a job almost as soon as one was created.  No WATcard was lost in this test. Since numStudents = numCouriers, however some
students finished early (S1, S4), meaning there were spare couriers to pick up any outstanding job.

-------------------------------------------------
COMMAND:
./soda valid_file.config 1234
SodaCost 				5
NumStudents 			10
MaxPurchases 			10
NumVendingMachines 		3
MaxStockPerFlavour 		10
MaxShippedPerFlavour 	10
TimeBetweenShipments 	5
GroupoffDelay 			5
ParentalDelay 			5
NumCouriers 			1

OUTPUT (Sample):
Parent	Gropoff	WATOff	Names	Truck	Plant	Stud0	Stud1	Stud2	Stud3	Stud4	Stud5	Stud6	Stud7	Stud8	Stud9	Mach0	Mach1	Mach2	Cour0
*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******
(cont)
D3,1				D0,22	P
				P1	G19											r
				D1,22												R	r
				P2
D1,1				D2,20													R	r	L1
				P19														R	t2,5
				P0
		W		D0,19	P		L
		C1,5		P1	G24											r
D3,2				D1,19												R	r
				P2
				D2,19													R	r
				P24														R
				P0
D0,2				D0,24	P
(cont)

EXPLANATION:
Trying to see how well a single courier could deal with multiple students (10 in this case) due to the large load of jobs, all the students ended up
using their giftcard first since the courrier was regularly interupted while trying to complete a job. The courier also lost a lot more WATCards(~9).
This is to be expected though since the  number of lost WATCards increases with the number of jobs the courier takes.  Since the total number of
drinks students needed to drink was 42, the courier had at least 32 jobs. One sixth of 32 is approximately 5, meaning the courier would have been
expected to lose at least 5 WATCards, with a possibility of losing them again. therefore ~9 losses isn't a surprise. Overall, the courier performed
as expected.
-------------------------------------------------
COMMAND:
./soda valid_file.config 1234
SodaCost 				5
NumStudents 			5
MaxPurchases 			1
NumVendingMachines 		3
MaxStockPerFlavour 		10
MaxShippedPerFlavour 	10
TimeBetweenShipments 	5
GroupoffDelay 			100
ParentalDelay 			1
NumCouriers 			10

OUTPUT (Sample):
Parent	Gropoff	WATOff	Names	Truck	Plant	Stud0	Stud1	Stud2	Stud3	Stud4	Mach0	Mach1	Mach2	Cour0	Cour1	Cour2	Cour3	Cour4	Cour5	Cour6	Cour7	Cour8	Cour9	
*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******
			S		S						S5	S5	S5
S	S	S			G35
D0,3		C0,5	R0	S		S3,1								S	S	S	S	S	S	S	S	S	S
D0,1		C1,5	R1				S0,1
D3,2
D4,2		C2,5	R2					S0,1
D1,3
D0,1		C3,5		P35					S0,1
				P0
				U0,25
D2,1				D0,0	P	V0
D4,3		C4,5	N0,0		G21					S4,1	r
D3,1							V1				R
D4,1														t0,5
D1,2		W	N1,1			B3,0		V2						T0,5
D4,3															t1,5
											B3,0				T1,5
...	...	...	...	...	...	F	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...
(cont)

EXPLANATION:
Trying to test a case where no groupoff is used due to the large delay, small number of students and the fact that each student only needed to
drink 1 soda, no student used the giftcard.  it simply took too long to deliver the giftcards. Groupoff only delivered 2 out 5 gift cards
before it's destructor was called.  Although it delivered the second giftcard after all the students had finished, the program still ended
without a problem and it didn't take long to complete.

-------------------------------------------------
COMMAND:
./soda valid_file.config 1234
SodaCost 				5
NumStudents 			5
MaxPurchases 			7
NumVendingMachines 		3
MaxStockPerFlavour 		10
MaxShippedPerFlavour 	10
TimeBetweenShipments 	5
GroupoffDelay 			5
ParentalDelay 			100
NumCouriers 			5

OUTPUT (Sample):
Parent	Gropoff	WATOff	Names	Truck	Plant	Stud0	Stud1	Stud2	Stud3	Stud4	Mach0	Mach1	Mach2	Cour0	Cour1	Cour2	Cour3	Cour4
*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******
(cont really far down)
				D1,20							R	r
				P2
				D2,20								R	r
				P28									R
				P0
				D0,28	P
				P1	G28						r
				D1,28							R	r
				P2
D2,2		C2,5		D2,28				L				R	r	L2
		W		P28									R					t2,5
				P0
				D0,28	P
				P1	G24						r
				D1,28							R	r
				P2
				D2,28								R	r
				P24									R
				P0
				D0,24	P
				P1	G35						r
(cont)


EXPLANATION:
Trying to test the affect of a long Parental delay on purchases. As expected, the program took longer than any other time to completeand printed
almost 5500 lines. Since the parents only deposited between $[1,3] at a time and the soda cost was $5 the students were required to wait much
longer for Parents to deposit enough funds to their accounts. Something to note about couriers: in this test, there was a case where Courier0
lost a student's card and Courier4 took the job to transfer funds to the new card after the student requested a new card from WATCardOffice
(by calling create).  